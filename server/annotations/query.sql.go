// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package annotations

import (
	"context"
	"database/sql"
)

const createAnnotation = `-- name: CreateAnnotation :one
INSERT INTO annotations (
        filename,
        keyword,
        content,
        notes
    )
VALUES (?, ?, ?, ?)
RETURNING id, filename, keyword, content, notes, created_at, updated_at
`

type CreateAnnotationParams struct {
	Filename string
	Keyword  string
	Content  string
	Notes    sql.NullString
}

func (q *Queries) CreateAnnotation(ctx context.Context, arg CreateAnnotationParams) (Annotation, error) {
	row := q.db.QueryRowContext(ctx, createAnnotation,
		arg.Filename,
		arg.Keyword,
		arg.Content,
		arg.Notes,
	)
	var i Annotation
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Keyword,
		&i.Content,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnnotation = `-- name: GetAnnotation :many
SELECT id, filename, keyword, content, notes, created_at, updated_at
FROM annotations
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetAnnotation(ctx context.Context, id int64) ([]Annotation, error) {
	rows, err := q.db.QueryContext(ctx, getAnnotation, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Annotation
	for rows.Next() {
		var i Annotation
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Keyword,
			&i.Content,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnnotations = `-- name: GetAnnotations :exec
SELECT id, filename, keyword, content, notes, created_at, updated_at
FROM annotations
ORDER BY keyword
`

func (q *Queries) GetAnnotations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, getAnnotations)
	return err
}

const updateAnnotation = `-- name: UpdateAnnotation :exec
UPDATE annotations
set filename = ?,
    keyword = ?,
    content = ?,
    notes = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateAnnotationParams struct {
	Filename string
	Keyword  string
	Content  string
	Notes    sql.NullString
	ID       int64
}

func (q *Queries) UpdateAnnotation(ctx context.Context, arg UpdateAnnotationParams) error {
	_, err := q.db.ExecContext(ctx, updateAnnotation,
		arg.Filename,
		arg.Keyword,
		arg.Content,
		arg.Notes,
		arg.ID,
	)
	return err
}
